/*
 * generated by Xtext 2.26.0
 */
package adaptersLang.ide.contentassist.antlr;

import adaptersLang.ide.contentassist.antlr.internal.InternalAdaptersLangParser;
import adaptersLang.services.AdaptersLangGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AdaptersLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AdaptersLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AdaptersLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getAdapterModelAccess().getGroup(), "rule__AdapterModel__Group__0");
			builder.put(grammarAccess.getAdapterModelAccess().getGroup_8(), "rule__AdapterModel__Group_8__0");
			builder.put(grammarAccess.getAdapterModelAccess().getGroup_8_1(), "rule__AdapterModel__Group_8_1__0");
			builder.put(grammarAccess.getAdapterAccess().getGroup(), "rule__Adapter__Group__0");
			builder.put(grammarAccess.getAdapterAccess().getGroup_8(), "rule__Adapter__Group_8__0");
			builder.put(grammarAccess.getConfigDiffAccess().getGroup(), "rule__ConfigDiff__Group__0");
			builder.put(grammarAccess.getConfigDeltaAccess().getGroup(), "rule__ConfigDelta__Group__0");
			builder.put(grammarAccess.getConfigDeltaAccess().getGroup_3(), "rule__ConfigDelta__Group_3__0");
			builder.put(grammarAccess.getConfigDeltaAccess().getGroup_3_1(), "rule__ConfigDelta__Group_3_1__0");
			builder.put(grammarAccess.getConfigDeltaAccess().getGroup_8(), "rule__ConfigDelta__Group_8__0");
			builder.put(grammarAccess.getConfigDeltaAccess().getGroup_8_1(), "rule__ConfigDelta__Group_8_1__0");
			builder.put(grammarAccess.getConfigContextAccess().getGroup(), "rule__ConfigContext__Group__0");
			builder.put(grammarAccess.getConfigContextAccess().getGroup_3(), "rule__ConfigContext__Group_3__0");
			builder.put(grammarAccess.getConfigContextAccess().getGroup_3_1(), "rule__ConfigContext__Group_3_1__0");
			builder.put(grammarAccess.getConfigContextAccess().getGroup_8(), "rule__ConfigContext__Group_8__0");
			builder.put(grammarAccess.getConfigContextAccess().getGroup_8_1(), "rule__ConfigContext__Group_8_1__0");
			builder.put(grammarAccess.getAdapterModelAccess().getNameAssignment_1(), "rule__AdapterModel__NameAssignment_1");
			builder.put(grammarAccess.getAdapterModelAccess().getEcoreAssignment_3(), "rule__AdapterModel__EcoreAssignment_3");
			builder.put(grammarAccess.getAdapterModelAccess().getTransformationAssignment_5(), "rule__AdapterModel__TransformationAssignment_5");
			builder.put(grammarAccess.getAdapterModelAccess().getAdaptersAssignment_8_0(), "rule__AdapterModel__AdaptersAssignment_8_0");
			builder.put(grammarAccess.getAdapterModelAccess().getAdaptersAssignment_8_1_1(), "rule__AdapterModel__AdaptersAssignment_8_1_1");
			builder.put(grammarAccess.getAdapterAccess().getNameAssignment_0(), "rule__Adapter__NameAssignment_0");
			builder.put(grammarAccess.getAdapterAccess().getCfgDiffAssignment_3(), "rule__Adapter__CfgDiffAssignment_3");
			builder.put(grammarAccess.getAdapterAccess().getRulesAssignment_7(), "rule__Adapter__RulesAssignment_7");
			builder.put(grammarAccess.getAdapterAccess().getRulesAssignment_8_1(), "rule__Adapter__RulesAssignment_8_1");
			builder.put(grammarAccess.getConfigDiffAccess().getDeltaAssignment_2(), "rule__ConfigDiff__DeltaAssignment_2");
			builder.put(grammarAccess.getConfigDiffAccess().getContextAssignment_7(), "rule__ConfigDiff__ContextAssignment_7");
			builder.put(grammarAccess.getConfigDeltaAccess().getPosSetAssignment_3_0(), "rule__ConfigDelta__PosSetAssignment_3_0");
			builder.put(grammarAccess.getConfigDeltaAccess().getPosSetAssignment_3_1_1(), "rule__ConfigDelta__PosSetAssignment_3_1_1");
			builder.put(grammarAccess.getConfigDeltaAccess().getNegSetAssignment_8_0(), "rule__ConfigDelta__NegSetAssignment_8_0");
			builder.put(grammarAccess.getConfigDeltaAccess().getNegSetAssignment_8_1_1(), "rule__ConfigDelta__NegSetAssignment_8_1_1");
			builder.put(grammarAccess.getConfigContextAccess().getPosSetAssignment_3_0(), "rule__ConfigContext__PosSetAssignment_3_0");
			builder.put(grammarAccess.getConfigContextAccess().getPosSetAssignment_3_1_1(), "rule__ConfigContext__PosSetAssignment_3_1_1");
			builder.put(grammarAccess.getConfigContextAccess().getNegSetAssignment_8_0(), "rule__ConfigContext__NegSetAssignment_8_0");
			builder.put(grammarAccess.getConfigContextAccess().getNegSetAssignment_8_1_1(), "rule__ConfigContext__NegSetAssignment_8_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AdaptersLangGrammarAccess grammarAccess;

	@Override
	protected InternalAdaptersLangParser createParser() {
		InternalAdaptersLangParser result = new InternalAdaptersLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AdaptersLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AdaptersLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
