/*
 * generated by Xtext 2.27.0
 */
package adaptersLang.ui.contentassist;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.henshin.model.HenshinPackage;
import org.eclipse.emf.henshin.model.Module;
import org.eclipse.emf.henshin.model.Rule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import adapters.Adapter;
import adapters.AdapterModel;
import adapters.ConfigContext;
import adapters.ConfigDelta;
import adapters.ConfigDiff;
import adapters.ConfigTuple;
import adaptersLang.utils.HenshinUtils;
import de.ovgu.featureide.fm.core.base.IFeature;
import merlin.common.features.DefaultFeatureProvider;
import merlin.common.utils.FileUtils;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class AdaptersLangProposalProvider extends AbstractAdaptersLangProposalProvider {
	@Override
	public void completeAdapter_Rules(	EObject model, Assignment assignment, 
										ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeAdapter_Rules(model, assignment, context, acceptor);
		Adapter adp = (Adapter) model;
		AdapterModel adm = (AdapterModel) adp.eContainer();
		IFile file = HenshinUtils.getFile(adm.getTransformation());
		Module m = HenshinUtils.load(file);
		
		TreeSet<String> ruleNames = new TreeSet<>();
		
		for (Rule r : m.getAllRules()) {
			String ruleName = r.getName();
			if (!adp.getRules().contains(ruleName))
				ruleNames.add(ruleName);
		}
		for (String ruleName : ruleNames)
			acceptor.accept(createCompletionProposal(ruleName, context));		
	}
	
	@Override
	public void completeConfigDelta_PosSet(	EObject model, Assignment assignment, 
											ContentAssistContext context, 
											ICompletionProposalAcceptor acceptor) {
		super.completeConfigDelta_PosSet(model, assignment, context, acceptor);
		this.recommendFeatures(model, context, acceptor, getExistingFeaturesFromDiff(model));		
	}
	
	@Override
	public void completeConfigDelta_NegSet(	EObject model, Assignment assignment, 
											ContentAssistContext context, 
											ICompletionProposalAcceptor acceptor) {
		super.completeConfigDelta_NegSet(model, assignment, context, acceptor);
		this.recommendFeatures(model, context, acceptor, getExistingFeaturesFromDiff(model));
	}
	
	@Override
	public void completeConfigContext_PosSet(	EObject model, Assignment assignment, 
												ContentAssistContext context, 
												ICompletionProposalAcceptor acceptor) {
		super.completeConfigContext_PosSet(model, assignment, context, acceptor);
		this.recommendFeatures(model, context, acceptor, getExistingFeaturesFromDiff(model));
	}

	@Override
	public void completeConfigContext_NegSet ( EObject model, Assignment assignment, 
											   ContentAssistContext context, 
											   ICompletionProposalAcceptor acceptor) {
		super.completeConfigContext_NegSet(model, assignment, context, acceptor);
		this.recommendFeatures(model, context, acceptor, getExistingFeaturesFromDiff(model));
	}
	
	// ---------- aux methods

	private List<String> getExistingFeaturesFromDiff(EObject model) {
		ConfigTuple cft = (ConfigTuple) model;
		ConfigDiff cd = (ConfigDiff) cft.eContainer();
		return cd.getFeatures();
	}

	private void recommendFeatures( EObject model, 
									ContentAssistContext context, 
									ICompletionProposalAcceptor acceptor,
									List<String> existingFeatures) {
		// TODO: Not a loop, but locate the right project 
		for (IProject p : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
			IFile featureModelFile = FileUtils.getIFile(p, "model.xml"); 		// to-do: read this from eccore annotation
			if (featureModelFile==null) continue;
			DefaultFeatureProvider provider = new DefaultFeatureProvider(featureModelFile);
			for (IFeature feat: provider.getFeatures()) {
				if (!existingFeatures.contains(feat.getName()))
					acceptor.accept(createCompletionProposal(feat.getName(), context));
			}
		}
	}
	
}
