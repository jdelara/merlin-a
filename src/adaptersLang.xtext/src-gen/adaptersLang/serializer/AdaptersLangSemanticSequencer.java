/*
 * generated by Xtext 2.26.0
 */
package adaptersLang.serializer;

import adapters.Adapter;
import adapters.AdapterModel;
import adapters.AdaptersPackage;
import adapters.ConfigContext;
import adapters.ConfigDelta;
import adapters.ConfigDiff;
import adaptersLang.services.AdaptersLangGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AdaptersLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AdaptersLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AdaptersPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AdaptersPackage.ADAPTER:
				sequence_Adapter(context, (Adapter) semanticObject); 
				return; 
			case AdaptersPackage.ADAPTER_MODEL:
				sequence_AdapterModel(context, (AdapterModel) semanticObject); 
				return; 
			case AdaptersPackage.CONFIG_CONTEXT:
				sequence_ConfigContext(context, (ConfigContext) semanticObject); 
				return; 
			case AdaptersPackage.CONFIG_DELTA:
				sequence_ConfigDelta(context, (ConfigDelta) semanticObject); 
				return; 
			case AdaptersPackage.CONFIG_DIFF:
				sequence_ConfigDiff(context, (ConfigDiff) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AdapterModel returns AdapterModel
	 *
	 * Constraint:
	 *     (name=EString ecore=EString transformation=EString (adapters+=Adapter adapters+=Adapter*)?)
	 * </pre>
	 */
	protected void sequence_AdapterModel(ISerializationContext context, AdapterModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Adapter returns Adapter
	 *
	 * Constraint:
	 *     (name=EString cfgDiff=ConfigDiff rules+=EString rules+=EString*)
	 * </pre>
	 */
	protected void sequence_Adapter(ISerializationContext context, Adapter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigContext returns ConfigContext
	 *
	 * Constraint:
	 *     ((posSet+=EString posSet+=EString*)? (negSet+=EString negSet+=EString*)?)
	 * </pre>
	 */
	protected void sequence_ConfigContext(ISerializationContext context, ConfigContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigDelta returns ConfigDelta
	 *
	 * Constraint:
	 *     ((posSet+=EString posSet+=EString*)? (negSet+=EString negSet+=EString*)?)
	 * </pre>
	 */
	protected void sequence_ConfigDelta(ISerializationContext context, ConfigDelta semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigDiff returns ConfigDiff
	 *
	 * Constraint:
	 *     (delta=ConfigDelta context=ConfigContext)
	 * </pre>
	 */
	protected void sequence_ConfigDiff(ISerializationContext context, ConfigDiff semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AdaptersPackage.Literals.CONFIG_DIFF__DELTA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptersPackage.Literals.CONFIG_DIFF__DELTA));
			if (transientValues.isValueTransient(semanticObject, AdaptersPackage.Literals.CONFIG_DIFF__CONTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AdaptersPackage.Literals.CONFIG_DIFF__CONTEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigDiffAccess().getDeltaConfigDeltaParserRuleCall_2_0(), semanticObject.getDelta());
		feeder.accept(grammarAccess.getConfigDiffAccess().getContextConfigContextParserRuleCall_7_0(), semanticObject.getContext());
		feeder.finish();
	}
	
	
}
