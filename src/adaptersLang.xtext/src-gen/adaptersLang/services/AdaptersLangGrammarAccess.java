/*
 * generated by Xtext 2.26.0
 */
package adaptersLang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AdaptersLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AdapterModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "adaptersLang.AdaptersLang.AdapterModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLanguageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEcoreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEcoreEStringParserRuleCall_3_0 = (RuleCall)cEcoreAssignment_3.eContents().get(0);
		private final Keyword cTransformationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTransformationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransformationEStringParserRuleCall_5_0 = (RuleCall)cTransformationAssignment_5.eContents().get(0);
		private final Keyword cAdaptersKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cAdaptersAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cAdaptersAdapterParserRuleCall_8_0_0 = (RuleCall)cAdaptersAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cAdaptersAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cAdaptersAdapterParserRuleCall_8_1_1_0 = (RuleCall)cAdaptersAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AdapterModel returns AdapterModel:
		//    'language' name=EString
		//    'on' ecore=EString
		//    'transformation' transformation=EString
		//    'adapters'
		//    '{'
		//        (adapters+=Adapter ( "," adapters+=Adapter)*)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'language' name=EString
		//'on' ecore=EString
		//'transformation' transformation=EString
		//'adapters'
		//'{'
		//    (adapters+=Adapter ( "," adapters+=Adapter)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'language'
		public Keyword getLanguageKeyword_0() { return cLanguageKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//ecore=EString
		public Assignment getEcoreAssignment_3() { return cEcoreAssignment_3; }
		
		//EString
		public RuleCall getEcoreEStringParserRuleCall_3_0() { return cEcoreEStringParserRuleCall_3_0; }
		
		//'transformation'
		public Keyword getTransformationKeyword_4() { return cTransformationKeyword_4; }
		
		//transformation=EString
		public Assignment getTransformationAssignment_5() { return cTransformationAssignment_5; }
		
		//EString
		public RuleCall getTransformationEStringParserRuleCall_5_0() { return cTransformationEStringParserRuleCall_5_0; }
		
		//'adapters'
		public Keyword getAdaptersKeyword_6() { return cAdaptersKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(adapters+=Adapter ( "," adapters+=Adapter)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//adapters+=Adapter
		public Assignment getAdaptersAssignment_8_0() { return cAdaptersAssignment_8_0; }
		
		//Adapter
		public RuleCall getAdaptersAdapterParserRuleCall_8_0_0() { return cAdaptersAdapterParserRuleCall_8_0_0; }
		
		//( "," adapters+=Adapter)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }
		
		//adapters+=Adapter
		public Assignment getAdaptersAssignment_8_1_1() { return cAdaptersAssignment_8_1_1; }
		
		//Adapter
		public RuleCall getAdaptersAdapterParserRuleCall_8_1_1_0() { return cAdaptersAdapterParserRuleCall_8_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class AdapterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "adaptersLang.AdaptersLang.Adapter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCfgDiffAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCfgDiffConfigDiffParserRuleCall_3_0 = (RuleCall)cCfgDiffAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRulesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRulesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRulesEStringParserRuleCall_7_0 = (RuleCall)cRulesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cRulesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cRulesEStringParserRuleCall_8_1_0 = (RuleCall)cRulesAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Adapter returns Adapter:
		//    name=EString
		//    '='
		//    '('
		//        cfgDiff=ConfigDiff
		//        ','
		//        'rules' '{' rules+=EString ( "," rules+=EString)* '}'
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'='
		//'('
		//    cfgDiff=ConfigDiff
		//    ','
		//    'rules' '{' rules+=EString ( "," rules+=EString)* '}'
		//')'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//cfgDiff=ConfigDiff
		public Assignment getCfgDiffAssignment_3() { return cCfgDiffAssignment_3; }
		
		//ConfigDiff
		public RuleCall getCfgDiffConfigDiffParserRuleCall_3_0() { return cCfgDiffConfigDiffParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'rules'
		public Keyword getRulesKeyword_5() { return cRulesKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//rules+=EString
		public Assignment getRulesAssignment_7() { return cRulesAssignment_7; }
		
		//EString
		public RuleCall getRulesEStringParserRuleCall_7_0() { return cRulesEStringParserRuleCall_7_0; }
		
		//( "," rules+=EString)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//rules+=EString
		public Assignment getRulesAssignment_8_1() { return cRulesAssignment_8_1; }
		
		//EString
		public RuleCall getRulesEStringParserRuleCall_8_1_0() { return cRulesEStringParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "adaptersLang.AdaptersLang.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ConfigDiffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "adaptersLang.AdaptersLang.ConfigDiff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeltaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeltaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeltaConfigDeltaParserRuleCall_2_0 = (RuleCall)cDeltaAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cContextKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContextAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContextConfigContextParserRuleCall_7_0 = (RuleCall)cContextAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ConfigDiff returns ConfigDiff:
		//    'delta' '(' delta=ConfigDelta ')' ','
		//    'context' '(' context=ConfigContext ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'delta' '(' delta=ConfigDelta ')' ','
		//'context' '(' context=ConfigContext ')'
		public Group getGroup() { return cGroup; }
		
		//'delta'
		public Keyword getDeltaKeyword_0() { return cDeltaKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//delta=ConfigDelta
		public Assignment getDeltaAssignment_2() { return cDeltaAssignment_2; }
		
		//ConfigDelta
		public RuleCall getDeltaConfigDeltaParserRuleCall_2_0() { return cDeltaConfigDeltaParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'context'
		public Keyword getContextKeyword_5() { return cContextKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//context=ConfigContext
		public Assignment getContextAssignment_7() { return cContextAssignment_7; }
		
		//ConfigContext
		public RuleCall getContextConfigContextParserRuleCall_7_0() { return cContextConfigContextParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class ConfigDeltaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "adaptersLang.AdaptersLang.ConfigDelta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigDeltaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPosSetAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPosSetEStringParserRuleCall_3_0_0 = (RuleCall)cPosSetAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPosSetAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPosSetEStringParserRuleCall_3_1_1_0 = (RuleCall)cPosSetAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusPlusSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cNegSetAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cNegSetEStringParserRuleCall_8_0_0 = (RuleCall)cNegSetAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cNegSetAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cNegSetEStringParserRuleCall_8_1_1_0 = (RuleCall)cNegSetAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ConfigDelta returns ConfigDelta:
		//    {ConfigDelta}
		//    '+-' '{' (posSet+=EString ( "," posSet+=EString)*)? '}' ','
		//    '-+' '{' (negSet+=EString ( "," negSet+=EString)*)? '}' ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConfigDelta}
		//'+-' '{' (posSet+=EString ( "," posSet+=EString)*)? '}' ','
		//'-+' '{' (negSet+=EString ( "," negSet+=EString)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ConfigDelta}
		public Action getConfigDeltaAction_0() { return cConfigDeltaAction_0; }
		
		//'+-'
		public Keyword getPlusSignHyphenMinusKeyword_1() { return cPlusSignHyphenMinusKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(posSet+=EString ( "," posSet+=EString)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//posSet+=EString
		public Assignment getPosSetAssignment_3_0() { return cPosSetAssignment_3_0; }
		
		//EString
		public RuleCall getPosSetEStringParserRuleCall_3_0_0() { return cPosSetEStringParserRuleCall_3_0_0; }
		
		//( "," posSet+=EString)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//posSet+=EString
		public Assignment getPosSetAssignment_3_1_1() { return cPosSetAssignment_3_1_1; }
		
		//EString
		public RuleCall getPosSetEStringParserRuleCall_3_1_1_0() { return cPosSetEStringParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'-+'
		public Keyword getHyphenMinusPlusSignKeyword_6() { return cHyphenMinusPlusSignKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(negSet+=EString ( "," negSet+=EString)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//negSet+=EString
		public Assignment getNegSetAssignment_8_0() { return cNegSetAssignment_8_0; }
		
		//EString
		public RuleCall getNegSetEStringParserRuleCall_8_0_0() { return cNegSetEStringParserRuleCall_8_0_0; }
		
		//( "," negSet+=EString)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }
		
		//negSet+=EString
		public Assignment getNegSetAssignment_8_1_1() { return cNegSetAssignment_8_1_1; }
		
		//EString
		public RuleCall getNegSetEStringParserRuleCall_8_1_1_0() { return cNegSetEStringParserRuleCall_8_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ConfigContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "adaptersLang.AdaptersLang.ConfigContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPosSetAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPosSetEStringParserRuleCall_3_0_0 = (RuleCall)cPosSetAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPosSetAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPosSetEStringParserRuleCall_3_1_1_0 = (RuleCall)cPosSetAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusHyphenMinusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cNegSetAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cNegSetEStringParserRuleCall_8_0_0 = (RuleCall)cNegSetAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cNegSetAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cNegSetEStringParserRuleCall_8_1_1_0 = (RuleCall)cNegSetAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ConfigContext returns ConfigContext:
		//    {ConfigContext}
		//    '++' '{' (posSet+=EString ( "," posSet+=EString)*)? '}' ','
		//    '--' '{' (negSet+=EString ( "," negSet+=EString)*)? '}' ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConfigContext}
		//'++' '{' (posSet+=EString ( "," posSet+=EString)*)? '}' ','
		//'--' '{' (negSet+=EString ( "," negSet+=EString)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ConfigContext}
		public Action getConfigContextAction_0() { return cConfigContextAction_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1() { return cPlusSignPlusSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(posSet+=EString ( "," posSet+=EString)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//posSet+=EString
		public Assignment getPosSetAssignment_3_0() { return cPosSetAssignment_3_0; }
		
		//EString
		public RuleCall getPosSetEStringParserRuleCall_3_0_0() { return cPosSetEStringParserRuleCall_3_0_0; }
		
		//( "," posSet+=EString)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//posSet+=EString
		public Assignment getPosSetAssignment_3_1_1() { return cPosSetAssignment_3_1_1; }
		
		//EString
		public RuleCall getPosSetEStringParserRuleCall_3_1_1_0() { return cPosSetEStringParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_6() { return cHyphenMinusHyphenMinusKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(negSet+=EString ( "," negSet+=EString)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//negSet+=EString
		public Assignment getNegSetAssignment_8_0() { return cNegSetAssignment_8_0; }
		
		//EString
		public RuleCall getNegSetEStringParserRuleCall_8_0_0() { return cNegSetEStringParserRuleCall_8_0_0; }
		
		//( "," negSet+=EString)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }
		
		//negSet+=EString
		public Assignment getNegSetAssignment_8_1_1() { return cNegSetAssignment_8_1_1; }
		
		//EString
		public RuleCall getNegSetEStringParserRuleCall_8_1_1_0() { return cNegSetEStringParserRuleCall_8_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	
	private final AdapterModelElements pAdapterModel;
	private final AdapterElements pAdapter;
	private final EStringElements pEString;
	private final ConfigDiffElements pConfigDiff;
	private final ConfigDeltaElements pConfigDelta;
	private final ConfigContextElements pConfigContext;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdaptersLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAdapterModel = new AdapterModelElements();
		this.pAdapter = new AdapterElements();
		this.pEString = new EStringElements();
		this.pConfigDiff = new ConfigDiffElements();
		this.pConfigDelta = new ConfigDeltaElements();
		this.pConfigContext = new ConfigContextElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("adaptersLang.AdaptersLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdapterModel returns AdapterModel:
	//    'language' name=EString
	//    'on' ecore=EString
	//    'transformation' transformation=EString
	//    'adapters'
	//    '{'
	//        (adapters+=Adapter ( "," adapters+=Adapter)*)?
	//    '}';
	public AdapterModelElements getAdapterModelAccess() {
		return pAdapterModel;
	}
	
	public ParserRule getAdapterModelRule() {
		return getAdapterModelAccess().getRule();
	}
	
	//Adapter returns Adapter:
	//    name=EString
	//    '='
	//    '('
	//        cfgDiff=ConfigDiff
	//        ','
	//        'rules' '{' rules+=EString ( "," rules+=EString)* '}'
	//    ')';
	public AdapterElements getAdapterAccess() {
		return pAdapter;
	}
	
	public ParserRule getAdapterRule() {
		return getAdapterAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//ConfigDiff returns ConfigDiff:
	//    'delta' '(' delta=ConfigDelta ')' ','
	//    'context' '(' context=ConfigContext ')';
	public ConfigDiffElements getConfigDiffAccess() {
		return pConfigDiff;
	}
	
	public ParserRule getConfigDiffRule() {
		return getConfigDiffAccess().getRule();
	}
	
	//ConfigDelta returns ConfigDelta:
	//    {ConfigDelta}
	//    '+-' '{' (posSet+=EString ( "," posSet+=EString)*)? '}' ','
	//    '-+' '{' (negSet+=EString ( "," negSet+=EString)*)? '}' ;
	public ConfigDeltaElements getConfigDeltaAccess() {
		return pConfigDelta;
	}
	
	public ParserRule getConfigDeltaRule() {
		return getConfigDeltaAccess().getRule();
	}
	
	//ConfigContext returns ConfigContext:
	//    {ConfigContext}
	//    '++' '{' (posSet+=EString ( "," posSet+=EString)*)? '}' ','
	//    '--' '{' (negSet+=EString ( "," negSet+=EString)*)? '}' ;
	public ConfigContextElements getConfigContextAccess() {
		return pConfigContext;
	}
	
	public ParserRule getConfigContextRule() {
		return getConfigContextAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
